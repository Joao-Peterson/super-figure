{
	"name": "super-figure",
	"publisher": "Peterson",
	"displayName": "Super Figure",
	"description": "Easily create/edit/paste vector and bitmap images into latex or markdown for ease note taking and writing. With out of the box support for Inkscape and Gimp",
	"version": "1.0.3",
	"icon": "images/icon.png",
	"license": "SEE LICENSE IN LICENSE",
	"homepage": "https://github.com/Joao-Peterson/super-figure",
	"bugs": "https://github.com/Joao-Peterson/super-figure/issues",
	"repository": {
		"type": "git",
		"url": "https://github.com/Joao-Peterson/super-figure"
	},
	"engines": {
		"vscode": "^1.74.0"
	},
	"categories": [
		"Visualization",
		"Snippets",
		"Education"
	],
	"keywords": [
		"latex",
		"markdown",
		"inkscape",
		"gimp",
		"image paste",
		"note taking"
	],
	"activationEvents": [
		"onLanguage:markdown",
		"onLanguage:tex",
		"onLanguage:latex"
	],
	"main": "./out/extension.js",
	"contributes": {
		"configuration": {
			"title": "Super Figure",
			"properties": {
				"super-figure.vectorFigureEditor": {
					"type": "string",
					"default": "",
					"description": "Full path for a vector figure editor executable. Ex: '/usr/bin/inkscape' or 'C:/Program Files/Inkscape/bin/inkscape.exe'"
				},
				"super-figure.vectorFigureEditorArgs": {
					"type": "string",
					"default": "${file}",
					"description": "Commands line argumments to be passed to the vector editing executable. Ex: ${file} --option=5"
				},
				"super-figure.vectorFileExt": {
					"type": "string",
					"default": "svg,eps,svgz,ps,ai,dwg",
					"description": "List of file extensions to check for vector images"
				},
				"super-figure.vectorTemplate": {
					"type": "string",
					"default": "~/.config/super-figure/templates/template.svg",
					"description": "Preferred file template for creating a vector figure that doesn't exist yet. Will try to use a template of the same file extension first, then this"
				},
				"super-figure.onVectorFileSave": {
					"type": "string",
					"default": "\"${executable}\" \"${file}\" --export-area-page --export-dpi 300 --export-type=pdf --export-latex --export-filename \"${dir}/${basename}.pdf\"",
					"description": "Callback command to when the vector figure is saved to disk. Ex: '/usr/bin/inkscape' --export-filename ${basename}.pdf"
				},
				"super-figure.bitmapFigureEditor": {
					"type": "string",
					"default": "",
					"description": "Full path for a bitmap figure editor executable. Ex: '/usr/bin/gimp' or 'C:/Program Files/GIMP 2/bin/gimp-2.10.exe'"
				},
				"super-figure.bitmapFigureEditorArgs": {
					"type": "string",
					"default": "${file}",
					"description": "Commands line argumments to be passed to the bitmap editing executable. Ex: ${file} --option=5"
				},
				"super-figure.bitmapFileExt": {
					"type": "string",
					"default": "png,jpeg,jpg,gif,tiff,bmp,xcf",
					"description": "List of file extensions to check for bitmap images"
				},
				"super-figure.bitmapTemplate": {
					"type": "string",
					"default": "~/.config/super-figure/templates/template.xcf",
					"description": "Preferred file template for creating a bitmap figure that doesn't exist yet. Will try to use a template of the same file extension first, then this"
				},
				"super-figure.onBitmapFileSave": {
					"type": "string",
					"default": "\"${executable}\" -n -i -b \"(let* ( (filename \\\"${file}\\\") (fileout \\\"${dir}/${basename}.png\\\") (image 0) (layer 0) ) (set! image (car (gimp-file-load RUN-NONINTERACTIVE filename filename))) (set! layer (car (gimp-image-merge-visible-layers image CLIP-TO-IMAGE))) (gimp-file-save RUN-NONINTERACTIVE image layer fileout fileout) (gimp-image-delete image) (gimp-quit 0))\"",
					"description": "Callback command to when the bitmap figure is saved to disk. Ex: '/usr/bin/inkscape' --export-filename ${basename}.pdf"
				},
				"super-figure.filesToWatch": {
					"type": "array",
					"default": [],
					"description": "Array that stores files to be watched. on*FileSave commands will be called for these."
				}
			}
		},
		"commands": [
			{
				"command": "super-figure.editFigure",
				"category": "Super Figure",
				"title": "Edit Figure"
			},
			{
				"command": "super-figure.renameFigure",
				"category": "Super Figure",
				"title": "Rename Figure"
			},
			{
				"command": "super-figure.editFigureExtension",
				"category": "Super Figure",
				"title": "Edit Figure based on the file extension"
			},
			{
				"command": "super-figure.editVector",
				"category": "Super Figure",
				"title": "Edit Vector figure"
			},
			{
				"command": "super-figure.editBitmap",
				"category": "Super Figure",
				"title": "Edit Bitmap figure"
			},
			{
				"command": "super-figure.insertLatexVectorFigure",
				"category": "Super Figure",
				"title": "Insert vector figure as latex snippet"
			},
			{
				"command": "super-figure.insertLatexBitmapFigure",
				"category": "Super Figure",
				"title": "Insert bitmap figure as latex snippet"
			},
			{
				"command": "super-figure.insertLatexPre",
				"category": "Super Figure",
				"title": "Insert latex required preamble"
			},
			{
				"command": "super-figure.insertMarkdownVectorFigure",
				"category": "Super Figure",
				"title": "Insert vector figure as markdown snippet"
			},
			{
				"command": "super-figure.insertMarkdownBitmapFigure",
				"category": "Super Figure",
				"title": "Insert bitmap figure as markdown snippet"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "super-figure.insertLatexVectorFigure",
					"when": "editorLangId == tex || editorLangId == latex"
				},
				{
					"command": "super-figure.insertLatexBitmapFigure",
					"when": "editorLangId == tex || editorLangId == latex"
				},
				{
					"command": "super-figure.insertLatexPre",
					"when": "editorLangId == tex || editorLangId == latex"
				},
				{
					"command": "super-figure.insertMarkdownVectorFigure",
					"when": "editorLangId == markdown"
				},
				{
					"command": "super-figure.insertMarkdownBitmapFigure",
					"when": "editorLangId == markdown"
				}
			]
		},
		"keybindings": [
			{
				"command": "super-figure.renameFigure",
				"key": "ctrl+alt+r",
				"when": "editorTextFocus"
			},
			{
				"command": "super-figure.insertLatexVectorFigure",
				"key": "ctrl+alt+v",
				"when": "editorLangId == tex || editorLangId == latex && editorTextFocus"
			},
			{
				"command": "super-figure.insertLatexBitmapFigure",
				"key": "ctrl+alt+b",
				"when": "editorLangId == tex || editorLangId == latex && editorTextFocus"
			},
			{
				"command": "super-figure.insertMarkdownVectorFigure",
				"key": "ctrl+alt+v",
				"when": "editorLangId == markdown && editorTextFocus"
			},
			{
				"command": "super-figure.insertMarkdownBitmapFigure",
				"key": "ctrl+alt+b",
				"when": "editorLangId == markdown && editorTextFocus"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "yarn run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "yarn run compile && yarn run lint",
		"lint": "eslint src --ext ts",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^8.0.0",
		"@types/mocha": "^10.0.1",
		"@types/node": "16.x",
		"@types/vscode": "^1.74.0",
		"@typescript-eslint/eslint-plugin": "^5.45.0",
		"@typescript-eslint/parser": "^5.45.0",
		"@vscode/test-electron": "^2.2.0",
		"eslint": "^8.28.0",
		"glob": "^8.0.3",
		"mocha": "^10.1.0",
		"ovsx": "^0.8.3",
		"typescript": "^4.9.3",
		"vsce": "^2.15.0"
	},
	"dependencies": {
		"chokidar": "^3.5.3",
		"generator-code": "^1.7.2",
		"global": "^4.4.0",
		"yo": "^4.3.1"
	}
}
